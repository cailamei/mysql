CentOS 7.2 部署MariaDB Galera Cluster(10.1.21-MariaDB) 3主集群环境

1. MariaDB Galera Cluster 介绍

	Galera Cluster是由第三方公司Codership所研发的一套免费开源的集群高可用方案，实现了数据零丢失，官网地址为http://galeracluster.com/其在MySQLInnoDB存储引擎基础上打了wrep(虚拟全同步复制)，Percona/MariaDB已捆绑在各自的发行版本中。
	MariaDB Galera Cluster是MariaDB同步多主机集群。它仅支持XtraDB/InnoDB存储引擎（虽然有对MyISAM实验支持，具体看wsrep_replicate_myisam系统变量）。

2. MariaDB Galera Cluster主要功能：

	1>  同步复制
	2>  真正的multi-master，即所有节点可以同时读写数据库
	3>  自动的节点成员控制，失效节点自动被清除
	4>  新节点加入数据自动复制
	5>  真正的并行复制，行级

3. 优势：

	l>  因为是多主，所以不存在Slavelag(延迟)
	2>  不存在丢失事务的情况
	3>  同时具有读和写的扩展能力
	4>  更小的客户端延迟
	5>  节点间数据是同步的，而Master/Slave模式是异步的，不同slave上的binlog可能是不同的

4. 缺点：

	1>  加入新节点时开销大，需要复制完整的数据
	2>  由于事务提交需要跨节点通信，即涉及分布式事务操作，因此写入会比主从复制慢很多，节点越多，写入越慢，死锁和回滚也会更加频繁
	3>  对网络要求比较高，如果网络出现波动不稳定，则可能会造成两个节点失联，Galera Cluster集群会发生脑裂，服务将不可用

5. 还有一些地方存在局限：

	l>  Delete操作不支持没有主键的表，因为没有主键的表在不同的节点上的顺序不同，如果执行select … limit …将出现不同的结果集
	2>  不能有大事务写入，不能操作wsrep_max_ws_rows=131072(行)，且写入集不能超过wsrep_max_ws_size=1073741824(1GB)，否则客户端直接报错
	3>  由于集群是乐观锁并发控制，因此，在commit阶段会有事务冲突发生。如果两个事务在集群中的不同节点上对同一行写入并提交，则失败的节点将回滚，客户端返回死锁报错
	4>  整个集群的写入吞吐量取决于最弱的节点限制，集群要使用同一的配置

 

6. 技术：



	1>  Galera集群的复制功能是基于认证的复制，其流程如下：

		当客户端发出一个commit的指令，在事务被提交之前，所有对数据库的更改都会被write-set收集起来，并且将write-set 记录的内容发送给其他节点。
		write-set 将在每个节点上使用搜索到的主键进行确认性认证测试，测试结果决定着节点是否应用write-set更改数据。如果认证测试失败，节点将丢弃 write-set ；如果认证测试成功，则事务提交

	2>  关于新节点的加入，流程如下：

		新加入的节点叫做Joiner，给Joiner提供复制的节点叫Donor。在该过程中首先会检查本地grastate.dat文件的seqno事务号是否在远端donor节点galera.cache文件里，如果存在，那么进行Incremental State Transfer(IST)增量同步复制，将剩余的事务发送过去；如果不存在那么进行State Snapshot Transfer(SST)全量同步复制。SST有三种全量拷贝方式：mysqldump、rsync和xtrabackup。SST的方法可以通过wsrep_sst_method这个参数来设置。

备注：

SST是指从donor到joiner的数据全量拷贝，它通常使用在一个新的节点加入时，为了与集群同步，新的节点不得不去一个已经在集群中的节点上拷贝数据，在PXC(Percona Xtradb Cluster)中，有三种SST的方法，mysqldump，rsync，Xtrabackup。

建议使用 XtraBackup，另外对XtraBackup补充说明：

在XtraBackup 2.1.x版本里，使用innobackupex备份时，备份流程如下：
1>  备份InnoDB表数据
2>  执行全局表读锁FLUSH TABLES WITH READ LOCKS
3>  拷贝.frm和MyISAM表数据
4>  得到当前的binlog文件名和position点
5>  完成redo log事务日志的后台复制
6>  解锁UNLOCK TABLES

由上面可以看出如果备份好几张MyISAM存储的大表时，将会进行锁表。

环境信息

MariaDB Server：10.1.21-MariaDB

CentOS：CentOS Linux release7.2.1511 (Core)

 

MariaDB Galera Cluster 三个集群节点主机名和IP地址信息：

192.168.1.104  mariadb-a03

192.168.1.105  mariadb-a04

192.168.1.106  mariadb-a05

 

 

环境准备

1.      配置hosts文件

# cat /etc/hosts
127.0.0.1 localhost.localdomain localhost
192.168.1.104 mariadb-a03
192.168.1.105 mariadb-a04
192.168.1.106 mariadb-a05

2.      /etc/security/limits.conf

* soft nofile 65536
* hard nofile 65536

3.      /etc/sysctl.conf

fs.file-max=655350
net.ipv4.ip_local_port_range = 1025 65000
net.ipv4.tcp_tw_recycle = 1


 

最后执行：

# sysctl -p

 

4.      安装Percona XtraBackup热备份工具

下载地址：

https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.6/binary/tarball/percona-xtrabackup-2.4.6-Linux-x86_64.tar.gz

 

解压缩：

# tar -zxvf percona-xtrabackup-2.4.6-Linux-x86_64.tar.gz


 

拷贝脚本到指定位置：

# cd percona-xtrabackup-2.4.6-Linux-x86_64/bin/
# cp -a * /usr/bin/


 

安装依赖的一些包，比如lsof，socat，openssl，tar等

 

创建XtraBackup备份时用的用户名和密码：

MariaDB [(none)]> grant all on *.* to 'galera'@'localhost' identified by '123456';


 

部署MariaDB

从MariaDB 10.1版本开始，Galera Cluster就已经包含在MariaDB包里面了，不需要单独部署MariaDB-Galera-server 和galera 包。

 

这里演示使用YUM方式部署MariaDB Galera Cluster。

步骤一：配置Yum源（192.168.1.104,192.168.1.105,192.168.1.106）

# touch /etc/yum.repos.d/MariaDB-IDC.repo
添加如下内容：
[mariadb]
name = MariaDB
baseurl =http://yum.mariadb.org/10.1/centos7-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1


 

由于我们的环境无法访问外网，单独部署一个MariaDB的Yum源：

# cat /etc/yum.repos.d/MariaDB-IDC.repo
[MariaDB-10.1-IDC]
name=MariaDB-10.1-IDC
baseurl=http://192.168.1.100/repo/yum.mariadb.org/10.1/centos7-amd64
gpgcheck=0
enabled=1


 

步骤二：安装MariaDB（192.168.1.104,192.168.1.105,192.168.1.106）

# yum install MariaDB-server MariaDB-clientgalera  -y


 

配置 MariaDB Galera Cluster

下面我们开始配置MariaDB Galera Cluster，分别修改MariaDB Galera集群的每个节点上的/etc/my.cnf.d/server.cnf文件，具体每个节点的内容如下：

 

1.      192.168.1.104节点的/etc/my.cnf.d/server.cnf文件内容：

[root@mariadb-a03 ~]# cat /etc/my.cnf.d/server.cnf | grep -v "#" | grep -v "^$"
[server]
[mysqld]
server_id=128
datadir=/app/galera
user=mysql
skip-external-locking
skip-name-resolve
character-set-server=utf8
 
[galera]
wsrep_causal_reads=ON  #节点应用完事务才返回查询请求
wsrep_provider_options="gcache.size=4G"#同步复制缓冲池
wsrep_certify_nonPK=ON   #为没有显式申明主键的表生成一个用于certificationtest的主键，默认为ON
#log-bin=/app/galera/mysql-bin  #如果不接从库，注释掉
#log_slave_updates=1         #如果不接从库，注释掉
query_cache_size=0           #关闭查询缓存
wsrep_on=ON   #开启全同步复制模式
wsrep_provider=/usr/lib64/galera/libgalera_smm.so#galera library
wsrep_cluster_name=MariaDB-Galera-Cluster
wsrep_cluster_address="gcomm://192.168.1.104,192.168.1.105,192.168.1.106"  #galera cluster URL
wsrep_node_name=mariadb-a03
wsrep_node_address=192.168.1.104
binlog_format=row
default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2   #主键自增模式修改为交叉模式
wsrep_slave_threads=8  #开启并行复制线程，根据CPU核数设置
innodb_flush_log_at_trx_commit=0   #事务提交每隔1秒刷盘
innodb_buffer_pool_size=2G
wsrep_sst_method=rsync
[embedded]
[mariadb]
[mariadb-10.1]


 

# 上面配置使用的是rsync方式同步数据，如果要使用xtrabackup方式（建议使用），需要设置：

wsrep_sst_auth=galera:123456

wsrep_sst_method=xtrabackup-v2 #默认是rsync全量拷贝，但是需要在donor节点上执行全局读锁(flushtables with read lock)，建议采用xtrabackup热备份方式，只有在备份.frm表结构文件才会锁表

 

2.      192.168.1.105节点的/etc/my.cnf.d/server.cnf文件内容：

[root@mariadb-a04 ~]# cat /etc/my.cnf.d/server.cnf | grep -v "#" | grep -v "^$"
[server]
[mysqld]
server_id=129
datadir=/app/galera
user=mysql
skip-external-locking
skip-name-resolve
character-set-server=utf8
 
[galera]
wsrep_causal_reads=ON
wsrep_provider_options="gcache.size=4G"
wsrep_certify_nonPK=ON
query_cache_size=0
wsrep_on=ON
wsrep_provider=/usr/lib64/galera/libgalera_smm.so
wsrep_cluster_name=MariaDB-Galera-Cluster
wsrep_cluster_address="gcomm://192.168.1.104,192.168.1.105,192.168.1.106"
wsrep_node_name=mariadb-a04
wsrep_node_address=192.168.1.105
binlog_format=row
default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2
wsrep_slave_threads=8
innodb_flush_log_at_trx_commit=0
innodb_buffer_pool_size=2G
wsrep_sst_method=rsync
[embedded]
[mariadb]
[mariadb-10.1]


 

3.      192.168.1.106节点的/etc/my.cnf.d/server.cnf文件内容：

[root@mariadb-a05 yum.repos.d]# cat /etc/my.cnf.d/server.cnf | grep -v "#" | grep -v "^$"
[server]
[mysqld]
server_id=130
datadir=/app/galera
user=mysql
skip-external-locking
skip-name-resolve
character-set-server=utf8
 
[galera]
wsrep_causal_reads=ON
wsrep_provider_options="gcache.size=4G"
wsrep_certify_nonPK=ON
query_cache_size=0
wsrep_on=ON
wsrep_provider=/usr/lib64/galera/libgalera_smm.so
wsrep_cluster_name=MariaDB-Galera-Cluster
wsrep_cluster_address="gcomm://192.168.1.104,192.168.1.105,192.168.1.106"
wsrep_node_name=mariadb-a05
wsrep_node_address=192.168.1.106
binlog_format=row
default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2
wsrep_slave_threads=8
innodb_flush_log_at_trx_commit=0
innodb_buffer_pool_size=2G
wsrep_sst_method=rsync
[embedded]
[mariadb]
[mariadb-10.1]


 

 

MariaDB一个节点初始化安装（192.168.1.104）：

# mysql_install_db --defaults-file=/etc/my.cnf.d/server.cnf --user=mysql


 

在192.168.1.104节点上通过bootstrap启动（第一次启动一定要使用--wsrep-new-cluster，再次启动就不需要）

mysqld_safe --defaults-file=/etc/my.cnf.d/server.cnf --user=mysql  --wsrep-new-cluster &


 

在192.168.1.104节点上设置root密码以及安全设置（192.168.1.104,192.168.1.105,192.168.1.106）

/usr/bin/mysql_secure_installation
或
mysql_secure_installation


 

 

在192.168.1.105,192.168.1.106节点启动MariaDB：

mysqld_safe --defaults-file=/etc/my.cnf.d/server.cnf --user=mysql  &


 

 

验证操作

登录三个节点查看

192.168.1.104节点：
MariaDB [(none)]> SHOW STATUS LIKE 'wsrep_cluster_size';
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| wsrep_cluster_size | 3     |
+--------------------+-------+
1 row in set (0.00 sec)
 
MariaDB [(none)]> show global status like 'ws%';
+------------------------------+-------------------------------------------------------------+
| Variable_name                | Value                                                      |
+------------------------------+-------------------------------------------------------------+
| wsrep_apply_oooe             | 0.000000                                                   |
| wsrep_apply_oool             | 0.000000                                                   |
| wsrep_apply_window           | 1.000000                                                    |
| wsrep_causal_reads           | 11                                                         |
| wsrep_cert_deps_distance     | 1.000000                                                   |
| wsrep_cert_index_size        | 2                                                           |
| wsrep_cert_interval          | 0.000000                                                   |
| wsrep_cluster_conf_id        | 3                                                          |
| wsrep_cluster_size           | 3                                                          |
| wsrep_cluster_state_uuid     |3108c722-ff29-11e6-a31f-bb500598d033                        |
| wsrep_cluster_status         | Primary                                                     |
| wsrep_commit_oooe            | 0.000000                                                   |
| wsrep_commit_oool            | 0.000000                                                   |
| wsrep_commit_window          | 1.000000                                                    |
| wsrep_connected              | ON                                                         |
| wsrep_desync_count           | 0                                                          |
| wsrep_evs_delayed            |                                                            |
| wsrep_evs_evict_list         |                                                            |
| wsrep_evs_repl_latency       | 0/0/0/0/0                                                   |
| wsrep_evs_state              | OPERATIONAL                                                |
| wsrep_flow_control_paused    | 0.000000                                                   |
| wsrep_flow_control_paused_ns | 0                                                           |
| wsrep_flow_control_recv      | 0                                                          |
| wsrep_flow_control_sent      | 0                                                          |
| wsrep_gcomm_uuid             |3107a278-ff29-11e6-96d3-374133af7e21                        |
| wsrep_incoming_addresses     | 192.168.1.105:3306,192.168.1.106:3306,192.168.1.104:3306|
| wsrep_last_committed         | 3                                                           |
| wsrep_local_bf_aborts        | 0                                                          |
| wsrep_local_cached_downto    | 1                                                          |
| wsrep_local_cert_failures    | 0                                                           |
| wsrep_local_commits          | 0                                                          |
| wsrep_local_index            | 2                                                          |
| wsrep_local_recv_queue       | 0                                                          |
| wsrep_local_recv_queue_avg   | 0.000000                                                   |
| wsrep_local_recv_queue_max   | 1                                                          |
| wsrep_local_recv_queue_min   | 0                                                          |
| wsrep_local_replays          | 0                                                          |
| wsrep_local_send_queue       | 0                                                           |
| wsrep_local_send_queue_avg   | 0.000000                                                   |
| wsrep_local_send_queue_max   | 1                                                          |
| wsrep_local_send_queue_min   | 0                                                          |
| wsrep_local_state            | 4                                                          |
| wsrep_local_state_comment    | Synced                                                     |
| wsrep_local_state_uuid       |3108c722-ff29-11e6-a31f-bb500598d033                        |
| wsrep_protocol_version       | 7                                                          |
| wsrep_provider_name          | Galera                                                      |
| wsrep_provider_vendor        | Codership Oy<info@codership.com>                           |
| wsrep_provider_version       | 25.3.19(r3667)                                              |
| wsrep_ready                  | ON                                                         |
| wsrep_received               | 10                                                         |
| wsrep_received_bytes         | 806                                                        |
| wsrep_repl_data_bytes        | 1044                                                       |
| wsrep_repl_keys              | 3                                                          |
| wsrep_repl_keys_bytes        | 93                                                          |
| wsrep_repl_other_bytes       | 0                                                          |
| wsrep_replicated             | 3                                                          |
| wsrep_replicated_bytes       | 1329                                                        |
| wsrep_thread_count           | 9                                                          |
+------------------------------+-------------------------------------------------------------+
58 rows in set (0.00 sec)


 

注释：

wsrep_cluster_status为Primary，表示节点为主节点，正常读写。

wsrep_ready为ON，表示集群正常运行。

wsrep_cluster_size为3，表示集群有三个节点。

 

创建数据库测试

192.168.1.104节点：
[root@mariadb-a03 my.cnf.d]# mysql -uroot –pxxxxxx
MariaDB [(none)]> create databasetest_db;
Query OK, 1 row affected (0.01 sec)


 

192.168.1.105节点查看：
[root@mariadb-a04 my.cnf.d]# mysql -uroot -pxxxxxx
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test_db            |
+--------------------+


 

192.168.1.106节点查看：
[root@mariadb-a05 my.cnf.d]# mysql -uroot -pxxxxxx
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test_db            |
+--------------------+
4 rows in set (0.00 sec)


 

可以看到集群正常使用。

 

创建MyISAM表测试

[root@mariadb-a03 my.cnf.d]# mysql -uroot –pxxxxxx
MariaDB [(none)]> use test_db;
Database changed
MariaDB [test_db]> create table myisam_tbl (id int,name text) ENGINE MyISAM;
Query OK, 0 rows affected (0.01 sec)
 
MariaDB [test_db]> insert into myisam_tbl values(1,'hive');
Query OK, 1 row affected (0.00 sec)
 
MariaDB [test_db]> insert into myisam_tbl values(2,'hbase');
Query OK, 1 row affected (0.00 sec)


 

其他节点查看：

[root@mariadb-a04 my.cnf.d]# mysql -uroot -pxxxxxx
MariaDB [(none)]> use test_db;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
MariaDB [test_db]> select * from myisam_tbl;
Empty set (0.00 sec)
 
[root@mariadb-a05 my.cnf.d]# mysql -uroot –pxxxxxx
MariaDB [(none)]> use test_db;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
MariaDB [test_db]> select * from myisam_tbl;
Empty set (0.00 sec)


 

可以看到MyISAM存储的表，Galera不支持同步。它仅支持XtraDB/ InnoDB存储引擎（虽然有对MyISAM实验支持，具体看wsrep_replicate_myisam系统变量）。

 

 

验证InnoDB存储的表

[root@mariadb-a03 my.cnf.d]# mysql -uroot  –pxxxxxx
MariaDB [test_db]> create table innodb_tbl(id int,name text) ENGINE InnoDB;
Query OK, 0 rows affected (0.04 sec)
 
MariaDB [test_db]> insert into innodb_tbl values(1,'hive');
Query OK, 1 row affected (0.00 sec)
 
MariaDB [test_db]> insert into innodb_tbl values(2,'hbase');
Query OK, 1 row affected (0.00 sec)
 
MariaDB [test_db]>


 

其他节点查看：

[root@mariadb-a04 my.cnf.d]# mysql -uroot -pxxxxxx
MariaDB [(none)]> use test_db;
Reading table information for completion oftable and column names
You can turn off this feature to get aquicker startup with -A
 
Database changed
MariaDB [test_db]> select * from innodb_tbl;
+------+-------+
| id  | name  |
+------+-------+
|   1 | hive  |
|   2 | hbase |
+------+-------+
2 rows in set (0.00 sec)
 
[root@mariadb-a05 my.cnf.d]# mysql -uroot –pxxxxxx
MariaDB [(none)]> use test_db;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
MariaDB [test_db]> select * from innodb_tbl;
+------+-------+
| id  | name  |
+------+-------+
|   1 | hive  |
|   2 | hbase |
+------+-------+
2 rows in set (0.00 sec)
 


 

模拟节点故障

将192.168.1.104数据库停止掉：

[root@mariadb-a03 system]# mysqladmin -uroot -p "shutdown"


 

然后在其他节点192.168.1.105执行：

MariaDB [test_db]> show global status like 'wsrep%';
+------------------------------+-----------------------------------------------+
| Variable_name                | Value                                         |
+------------------------------+-----------------------------------------------+
| wsrep_apply_oooe             | 0.000000                                      |
| wsrep_apply_oool             | 0.000000                                      |
| wsrep_apply_window           | 1.000000                                      |
| wsrep_causal_reads           | 26                                            |
| wsrep_cert_deps_distance     | 1.142857                                      |
| wsrep_cert_index_size        |6                                            |
| wsrep_cert_interval          | 0.000000                                      |
| wsrep_cluster_conf_id        | 6                                             |
| wsrep_cluster_size          | 2                                             |
| wsrep_cluster_state_uuid     |3108c722-ff29-11e6-a31f-bb500598d033         |
| wsrep_cluster_status         | Primary                                       |
| wsrep_commit_oooe            | 0.000000                                      |
| wsrep_commit_oool            | 0.000000                                      |
| wsrep_commit_window          | 1.000000                                      |
| wsrep_connected              | ON                                            |
| wsrep_desync_count           | 0                                             |
| wsrep_evs_delayed            |                                              |
| wsrep_evs_evict_list         |                                              |
| wsrep_evs_repl_latency       |0.000403989/0.000656768/0.0012094/0.0003239/4 |
| wsrep_evs_state              | OPERATIONAL                                   |
| wsrep_flow_control_paused    | 0.000000                                      |
| wsrep_flow_control_paused_ns | 0                                             |
| wsrep_flow_control_recv      | 0                                             |
| wsrep_flow_control_sent      | 0                                             |
| wsrep_gcomm_uuid             | 0ce8537e-ff2a-11e6-b037-8a383b6a8db5          |
| wsrep_incoming_addresses    | 192.168.1.105:3306,192.168.1.106:3306       |
| wsrep_last_committed         | 10                                            |
| wsrep_local_bf_aborts        | 0                                            |
| wsrep_local_cached_downto    | 4                                             |
| wsrep_local_cert_failures    | 0                                             |
| wsrep_local_commits          | 0                                             |
| wsrep_local_index            | 0                                             |
| wsrep_local_recv_queue       | 0                                             |
| wsrep_local_recv_queue_avg   | 0.000000                                      |
| wsrep_local_recv_queue_max   | 1                                             |
| wsrep_local_recv_queue_min   | 0                                             |
| wsrep_local_replays          | 0                                             |
| wsrep_local_send_queue       | 0                                             |
| wsrep_local_send_queue_avg   | 0.000000                                      |
| wsrep_local_send_queue_max   | 1                                             |
| wsrep_local_send_queue_min   | 0                                             |
| wsrep_local_state            | 4                                             |
| wsrep_local_state_comment    | Synced                                        |
| wsrep_local_state_uuid       |3108c722-ff29-11e6-a31f-bb500598d033         |
| wsrep_protocol_version       | 7                                             |
| wsrep_provider_name          | Galera                                        |
| wsrep_provider_vendor        | Codership Oy<info@codership.com>             |
| wsrep_provider_version       | 25.3.19(r3667)                                |
| wsrep_ready                  | ON                                            |
| wsrep_received               | 14                                            |
| wsrep_received_bytes         | 3908                                          |
| wsrep_repl_data_bytes        | 0                                             |
| wsrep_repl_keys              | 0                                             |
| wsrep_repl_keys_bytes        | 0                                             |
| wsrep_repl_other_bytes       | 0                                             |
| wsrep_replicated             | 0                                             |
| wsrep_replicated_bytes       | 0                                             |
| wsrep_thread_count           | 9                                             |
+------------------------------+-----------------------------------------------+

 

此时集群为自动将192.168.1.104故障节点剔除掉，并且正常提供服务。

 

最后我们恢复失败的节点：

[root@mariadb-a03 system]# mysqld_safe --defaults-file=/etc/my.cnf.d/server.cnf --user=mysql &

 

再次查看集群环境：

MariaDB [test_db]> SHOW STATUS LIKE 'wsrep_cluster_size';
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| wsrep_cluster_size | 3     |
+--------------------+-------+
1 row in set (0.00 sec

 

 

模拟脑裂后的处理

下面模拟在网络抖动发生丢包的情况下，两个节点失联导致脑裂。首先，在192.168.1.105和192.168.1.106两个节点上分别执行：

iptables -A INPUT -p tcp --sport 4567 -j DROP

iptables -A INPUT -p tcp --dport 4567 -j DROP

以上命令用来禁止wsrep全同步复制4567端口通信。

 

然后我们在192.168.1.104节点查看：

MariaDB [(none)]> show global statuslike 'ws%';
可以看到下面的几个值：
wsrep_cluster_size    1
wsrep_cluster_status  non-Primary
wsrep_ready         OFF
 
MariaDB [(none)]> use test_db;
ERROR 1047 (08S01): WSREP has not yetprepared node for application use
 
MariaDB [(none)]> select@@wsrep_node_name;
ERROR 1205 (HY000): Lock wait timeoutexceeded; try restarting transaction


 

现在已经出现脑裂的情况，并且集群无法执行任何命令。

 

为了解决这个问题，可以执行：

set global wsrep_provider_options="pc.bootstrap=true";

通过这个命令来强制恢复出现脑裂的节点。

 

下面我们来验证一下：

MariaDB [(none)]> select @@wsrep_node_name;
ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction
MariaDB [(none)]> set global wsrep_provider_options="pc.bootstrap=true";
Query OK, 0 rows affected (0.00 sec)
 
MariaDB [(none)]> select @@wsrep_node_name;
+-------------------+
| @@wsrep_node_name |
+-------------------+
| mariadb-a03     |
+-------------------+
1 row in set (0.27 sec)
 
MariaDB [(none)]> use test_db;
Reading table information for completion oft able and column names
You can turn off this feature to get a quicker startup with -A
 
Database changed
MariaDB [test_db]> show tables;
+-------------------+
| Tables_in_test_db |
+-------------------+
| innodb_tbl        |
| myisam_tbl        |
+-------------------+


 

 

最后我们将节点192.168.1.105和192.168.1.106恢复一下，只要清理一下iptables表即可(因为我的是测试环境，生产环境需要删除上面的规则即可)：

iptables –F

 

各个节点验证一下：

192.168.1.104：
MariaDB [test_db]> SHOW STATUS LIKE  'wsrep_cluster_size';
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| wsrep_cluster_size | 3     |
+--------------------+-------+
1 row in set (0.00 sec)
 
 
192.168.1.105：
MariaDB [(none)]> select @@wsrep_node_name;
+-------------------+
| @@wsrep_node_name |
+-------------------+
| mariadb-a04     |
+-------------------+


 

 

 

避免脏读

Galera Cluster不是真正意义上的全同步复制，存在延迟。我们可以在一个节点上面执行FLUSH TABLES WITH READ LOCK;全局读锁。

然后在其他节点执行写操作，观察延迟情况。

比如我们在192.168.1.106节点执行全局读锁设置：

MariaDB [test_db]> flush tables with read lock;
Query OK, 0 rows affected (0.00 sec)
 
MariaDB [test_db]> select * from innodb_tbl;
+------+------+
| id  | name |
+------+------+
|   1 | hive |
+------+------+
1 row in set (0.00 sec)
 
 
然后在192.168.1.104节点插入操作：
MariaDB [test_db]> select @@wsrep_node_name;
+-------------------+
| @@wsrep_node_name |
+-------------------+
| mariadb-a03     |
+-------------------+
1 row in set (0.00 sec)
 
MariaDB [test_db]> insert into innodb_tbl values(2,'hbase');
Query OK, 1 row affected (0.00 sec)
 
MariaDB [test_db]> select * from innodb_tbl;
+------+-------+
| id  | name  |
+------+-------+
|   1 | hive  |
|   2 | hbase |
+------+-------+
2 rows in set (0.00 sec)
 
在节点192.168.1.106上测试查询操作：
MariaDB [test_db]> select * from innodb_tbl;
ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction


 

这里之所以没有读取到脏数据，是因为我在MariaDB配置文件中设置了wsrep_causal_reads=ON;

 

我们将wsrep_causal_reads修改为0或OFF来看一下效果：

MariaDB [test_db]> set wsrep_causal_reads=0;
Query OK, 0 rows affected, 1 warning (0.00sec)
 
MariaDB [test_db]> select * from innodb_tbl;
+------+------+
| id  | name |
+------+------+
|   1 | hive |
+------+------+
1 row in set (0.00 sec)
 
MariaDB [test_db]>


 

总结

通过上面的一系列测试，最后总结一下：

1.       在生产环境下应该避免使用大事务，不建议在高并发写入场景下使用Galera Cluster架构，会导致集群限流，从而引起整个集群hang住，出现生产故障。针对这种情况可以考虑主从，实现读写分离等手段。

2.       对数据一致性要求较高，并且数据写入不频繁，数据库容量也不大（50GB左右），网络状况良好的情况下，可以考虑使用Galera方案

 

 

 

 

 

点赞 3
收藏
分享
文章举报
   
Free World  博客专家
发布了258 篇原创文章 · 获赞 97 · 访问量 104万+
他的留言板  关注
展开阅读全文 
更新表数据，或者复制数据到新表出现这样问题ERROR 1180 (HY000): Got error 5 during COMMIT
03-30 阅读数 1781
解决方案如下：mysql> select @@wsrep_max_ws_size;+---------------------+| @@wsrep_max_ws_size |+------------... 博文 来自：	ahzxj2012的专栏
 

想对作者说点什么
添加代码片
还能输入1000个字符  发表评论
Centos7下安装最新的MariaDB 10.2
12-01 阅读数 3060
前面文章中 《Centos7 快速安装 mariadb5.5》 介绍了快速安装MariaDB5.5,不过这个版本有点“老了”下面介绍如何安装最新的MariaDB参考 官网 安装只要创建好源即可# Ma... 博文 来自：	junehappylove（王俊伟）的专栏
CentOS7搭建MariaDB Galera Cluster集群
07-27 阅读数 479
安装MariaDB Galera Cluster集群 10.3.8单机安装与配置（yum）根据官网，从MariaDB 10.1版本开始，版本已自带Galera集群方案插件。 安装环境的操作系统为Cen... 博文 来自：	coder learner
Linux文件操作高频使用命令
08-28 阅读数 3万+
文章目录0.新建操作：1.查看操作2.删除操作3.复制操作4.移动操作：5.重命名操作：6.解压压缩操作0.新建操作：mkdir abc #新建一个文件夹touch abc.sh #新建一个文件1.查... 博文 来自：	不能如期而至的专栏
我的 Input框 不可能这么可爱
09-03 阅读数 3万+
作者：陈大鱼头github： KRISACHAN&lt;input /&gt; 标签是我们日常开发中非常常见的替换元素了，但是最近在刷 whattwg 跟 MDN 的时候发现 跟 &lt;input ... 博文 来自：	鱼头的Web海洋
Mariadb 集群 Galera Cluster 基于多主架构
07-17 阅读数 157
Mariadb10.2.25与Mariadb 5.5安装 galera cluster 区别：Mariadb 10.1版本以后，Galera Cluster 与Mariadb-server包在一起，此... 博文 来自：	抽象空间的博客
史上最详细的IDEA优雅整合Maven+SSM框架（详细思路+附带源码）
10-29 阅读数 6万+
网上很多整合SSM博客文章并不能让初探ssm的同学思路完全的清晰，可以试着关掉整合教程，摇两下头骨，哈一大口气，就在万事具备的时候，开整，这个时候你可能思路全无 ~中招了咩~ ，还有一些同学依旧在使用... 博文 来自：	程序员宜春的博客
学会了这些技术，你离BAT大厂不远了
08-26 阅读数 3741
每一个程序员都有一个梦想，梦想着能够进入阿里、腾讯、字节跳动、百度等一线互联网公司，由于身边的环境等原因，不知道 BAT 等一线互联网公司使用哪些技术？或者该如何去学习这些技术？或者我该去哪些获取这些... 博文
nginx学习，看这一篇就够了：下载、安装。使用：正向代理、反向代理、负载均衡。常用命令和配置文件
10-25 阅读数 2万+
文章目录前言一、nginx简介1. 什么是 nginx 和可以做什么事情2.Nginx 作为 web 服务器3. 正向代理4. 反向代理5. 动静分离6.动静分离二、Nginx 的安装三、 Ngin... 博文 来自：	冯安晨
Centos 7 MariaDB Galera cluster 部署
03-20 阅读数 5
一、安装环境准备　　1、系统：　　　　CentOS Linux release 7.4.1708 (Core)　　2、hosts　　　　10.6.32.51　　openstack1　　　　10.6.3... 博文 来自：	weixin_30552811的博客
程序员实用工具网站
09-04 阅读数 22万+
目录1、搜索引擎2、PPT3、图片操作4、文件共享5、应届生招聘6、程序员面试题库7、办公、开发软件8、高清图片、视频素材网站9、项目开源10、算法11、在线工具宝典大全程序员开发需要具备良好的信息检... 博文 来自：	不脱发的程序猿
Galera-MariaDB多主集群搭建
02-27 阅读数 8548
简介Galera Cluster for MySQL是一种同步复制解决方案，可以提高MySQL服务的可用性和性能。所有Galera Cluster节点都是相同的，完全代表集群，允许无约束的透明mysq... 博文 来自：	Java程序员
MariaDB的Galera集群应用场景--数据库多主多活
08-17 阅读数 1031
实施环境Centos  7.2V  1511MySQL  5.5.52V应用场景描述先前未做双主双活集群;一台数据库节点有历史数据;现在要做双主双活Galera集群.场景模拟演练创建一台有历史数据的数... 博文 来自：	KEYMA的专栏
从入门到精通，Java学习路线导航（附学习资源）
09-16 阅读数 9139
引言最近也有很多人来向我"请教"，他们大都是一些刚入门的新手，还不了解这个行业，也不知道从何学起，开始的时候非常迷茫，实在是每天回复很多人也很麻烦，所以在这里统一作个回复吧。Java学习路线当然，这里... 博文 来自：	java_sha的博客
分享靠写代码赚钱的一些门路
09-25 阅读数 1万+
作者 mezod，译者 josephchang10如今，通过自己的代码去赚钱变得越来越简单，不过对很多人来说依然还是很难，因为他们不知道有哪些门路。今天给大家分享一个精彩...... 博文 来自：	qq_33570092的博客
Google 为中国开发者都带来了什么？
09-10 阅读数 5201
Android10原生支持5G，Flutter1.9、Dart2.5正式发布！作者|唐小引写于上海世博中心封图|CSDN付费下载自东方IC出品|GDD合作伙伴CSDN（ID：CSDNnews）这是Go... 博文 来自：	CSDN资讯
处理MariaDB Galera cluster初始化和启动报错两例
06-14 阅读数 1万+
问题一:160613 0:43:36[Note]WSREP:ReadnilXIDfromstorageengines,skippingpositioninit160613 0:43:36[Note]W... 博文 来自：	zengxuewen2045的博客
centos7 系统上 mariadb galera 集群搭建
07-26 阅读数 2219
1.环境CentOS Linux release 7.3MariaDB 10.1.252.安装MariaDB配置mariadb10.1的yum源[root@centos7-compute1 ~]# c... 博文 来自：	zongyimin的博客
Python——画一棵漂亮的樱花树（不同种樱花+玫瑰+圣诞树喔）
10-22 阅读数 6万+
最近翻到一篇知乎，上面有不少用Python（大多是turtle库）绘制的树图，感觉很漂亮，我整理了一下，挑了一些我觉得不错的代码分享给大家（这些我都测试过，确实可以生成）one 樱花树 动态生成樱花效... 博文 来自：	碎片
win10电脑工具整理 - 常用工具！
10-04 阅读数 7493
如题，本文主要为博主对电脑上安装的一些软件，所做的整理，当做备份用吧。一、分类系统工具办公软件编程开发数据库相关图片视频工具网络及下载工具解压缩工具影音娱乐工具二、软件工具1.系统工具1.1. 磁盘管... 博文 来自：	Alfred的博客
【安全】Web渗透测试（全流程）
10-29 阅读数 1万+
1 信息收集1.1域名、IP、端口域名信息查询：信息可用于后续渗透IP信息查询：确认域名对应IP，确认IP是否真实，确认通信是否正常端口信息查询：NMap扫描，确认开放端口如果不会用Nmap，看这里：... 博文 来自：	qqchaozai的专栏
python 程序员进阶之路：从新手到高手的100个模块
10-23 阅读数 7万+
在知乎和CSDN的圈子里，经常看到、听到一些 python 初学者说，学完基础语法后，不知道该学什么，学了也不知道怎么用，一脸的茫然。近日，CSDN的公众号推送了一篇博客，题目叫做《迷思：Python... 博文 来自：	Python作业辅导员
对计算机专业来说学历真的重要吗？
09-27 阅读数 13万+
我本科学校是渣渣二本，研究生学校是985，现在毕业五年，校招笔试、面试，社招面试参加了两年了，就我个人的经历来说下这个问题。这篇文章很长，但绝对是精华，相信我，读完以后，你会知道学历不好的解决方案，记... 博文 来自：	启舰
我花了一夜用数据结构给女朋友写个H5走迷宫游戏
09-21 阅读数 20万+
起因又到深夜了，我按照以往在csdn和公众号写着数据结构！这占用了我大量的时间！我的超越妹妹严重缺乏陪伴而 怨气满满！而女朋友时常埋怨，认为数据结构这么抽象难懂的东西没啥作用，常会问道：天天写这玩意，... 博文 来自：	bigsai
MySQL Galera 集群安装与配置
03-14 阅读数 5405
MySQLGalera集群安装与配置GaleraCluster介绍Galera是一个MySQL(也支持MariaDB，Percona)的同步多主集群软件。主要功能同步复制Active-active的多... 博文 来自：	jeanette_zlj的博客
SNMP协议详解<二>
10-29 阅读数 16万+
上一篇文章讲解了SNMP的基本架构，本篇文章将重点分析SNMP报文，并对不同版本（SNMPv1、v2c、v3）进行区别！四、SNMP协议数据单元在SNMP管理中，管理站（NMS）和代理（Agent）之... 博文 来自：	假装在纽约
C语言实现推箱子游戏
09-29 阅读数 7万+
很早就想过做点小游戏了，但是一直没有机会动手。今天闲来无事，动起手来。过程还是蛮顺利的，代码也不是非常难。今天给大家分享一下~一、介绍开发语言：C语言开发工具：Dev-C++ 5.11日期：2019年... 博文 来自：	ZackSock的博客
为什么程序员在学习编程的时候什么都记不住？
10-12 阅读数 4万+
在程序员的职业生涯中，记住所有你接触过的代码是一件不可能的事情！那么我们该如何解决这一问题？作者 |Dylan Mestyanek译者 | 弯月，责编 | 屠敏出品 | CSDN（ID：CSDNnew... 博文 来自：	CSDN资讯
程序员成长的四个简单技巧，你 get 了吗？
10-23 阅读数 2万+
最近拜读了“阿里工程师的自我修养”手册，12 位技术专家分享生涯感悟来帮助我们这些菜鸡更好的成长，度过中年危机，我收获颇多，其中有不少的方法技巧和我正在使用的，这让我觉得我做的这些事情是对的，我走在了... 博文 来自：	平头哥的技术博文
如何在Windows中开启"上帝模式"
09-23 阅读数 1万+
原文链接 : https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&amp;mid=2650202982&amp;idx=1&amp;sn=2c6c609... 博文 来自：	时间静止
MySQL数据库—SQL汇总
10-24 阅读数 3万+
一、准备下文整理常见SQL语句的用法，使用MySQL5.7测试，参考了尚硅谷MySQL教程及用例。用例sql：链接: https://pan.baidu.com/s/1tb3-12MRNFjV8drF... 博文 来自：	Sirm23333
Linux/C/C++ 不可错过的好书
10-24 阅读数 1万+
来源：公众号【编程珠玑】作者：守望先生ID：shouwangxiansheng前言经常有读者让我推荐书籍，这次我就把我私藏的计算机书单分享给你们！不过由于时间匆忙，不会进行更加详细的介绍。声明由于每个... 博文 来自：	守望的博客-编程珠玑
技术人员要拿百万年薪，必须要经历这9个段位
08-24 阅读数 3万+
很多人都问，技术人员如何成长，每个阶段又是怎样的，如何才能走出当前的迷茫，实现自我的突破。所以我结合我自己10多年的从业经验，总结了技术人员成长的9个段位，希望对大家的职...... 博文 来自：	Python之禅的专栏
CentOS7部署(Mysql) MariaDB Galera Cluster 10.1记录
12-16 阅读数 24
1、环境说明vmwareworkstation 12centos 7.2 64bit mini installmariadb 10.1已关闭selinux firewalld2、yum安装mariad... 博文 来自：	weixin_33738982的博客
centos7下部署mariadb+galera数据库高可用集群
01-12 阅读数 992
环境准备：centos7；关闭selinux和firewalld；hosts文件解析；时间同步；root互信；三节点、环境部署：设置mariadb的yum源并安装（所有节点都要）(下载包的时候会很慢。... 博文 来自：	Nice_zou的博客
CentOS7环境下部署Mariadb-Galera集群
08-04 阅读数 18
搭建基于Galera的MySql集群CentOS7环境下部署Mariadb-Galera集群##mariadb-galera官网包：https://mariadb.com/kb/en/mariadb/... 博文 来自：	weixin_33690963的博客
实战Mariadb galera Cluster集群架构
03-09 阅读数 6
Mariadb galera Cluster安装：操作系统：Centos7.4版本集群数量：3个节点主机信息： 192.168.153.142 node1 selinux=disabled f... 博文 来自：	weixin_33943347的博客
centos 7 部署Mariadb集群
08-13 阅读数 344
1、环境要求： system：CetenOS 7 Server: 172.16.1.2 db1 172.16.1.3 db2 172.16.1.4 db3 模式：多主模式，通过w... 博文 来自：	浪学泛微
Spring高级技术梳理
09-20 阅读数 8481
Spring高级技术梳理 序言正文SpringDate部分Spring全家桶之SpringData——预科阶段Spring全家桶之SpringData——Spring 整合Hibernate与Hi... 博文 来自：	时间静止
CentOS7 部署 galera cluster mariadb 10.1
04-19 阅读数 9
为什么80%的码农都做不了架构师？&gt;&gt;&gt; ...... 博文 来自：	weixin_34032792的博客
爬虫小程序 - 爬取王者荣耀全皮肤
09-04 阅读数 1万+
王者荣耀全皮肤图片爬取 博文
从入门到精通，Java学习路线导航
11-12 阅读数 8万+
引言 最近也有很多人来向我"请教"，他们大都是一些刚入门的新手，还不了解这个行业，也不知道从何学起，开始的时候非常迷茫，实在是每天回复很多人也很麻烦，所以在这里统一作个回复吧。 Java学习路线 当然... 博文
如何优雅的爬妹子网
11-23 阅读数 2万+
from urllib import request import os from user_agents import ua_list import time import random impor... 博文
花了20分钟，给女朋友们写了一个web版群聊程序
11-28 阅读数 2万+
参考博客 [1]https://www.byteslounge.com/tutorials/java-ee-html5-websocket-example 博文
Java入门学习路线目录索引（持续更新中）
10-08 阅读数 1万+
新增： Redis 入门 【Redis缓存】- 入门——Redis介绍和环境搭建【Redis缓存】- Redis数据结构、基本命令操作、持久化【Redis缓存】- Java客户端Jedis Sp... 博文
SpringBoot学习笔记三、http接口请求
12-07 阅读数 210
controller package com.example.demo.controller; import java.util.HashMap; import java.util.Map; ... 博文
程序员必须掌握的核心算法有哪些？
10-21 阅读数 8万+
由于我之前一直强调数据结构以及算法学习的重要性，所以就有一些读者经常问我，数据结构与算法应该要学习到哪个程度呢？，说实话，这个问题我不知道要怎么回答你，主要取决于你想学习到哪些程度，不过针对这个问题，... 博文
这应该是把计算机网络五层模型讲的最好是文章了，看不懂你打我
10-25 阅读数 3万+
帅地：用心写好每一篇文章！ 前言 天各一方的两台计算机是如何通信的呢？在成千上万的计算机中，为什么一台计算机能够准确着寻找到另外一台计算机，并且把数据发送给它呢？ 可能很多人都听说过网络通信的 5 ... 博文
HTML CSS整理笔记
10-26 阅读数 2万+
常见字体单位： 1.em 移动端常用的字体尺寸单位，说白em就相当于“倍”，比如设置当前的div的字体大小为1.5em，则当前的div的字体大小为：当前div继承的字体大小*1.5。 但当div进行嵌... 博文
史上最全的mysql基础教程
10-28 阅读数 3万+
启动与停止 启动mysql服务 sudo /usr/local/mysql/support-files/mysql.server start 停止mysql服务 sudo /usr/loc... 博文
有哪些让程序员受益终生的建议
10-28 阅读数 7万+
从业五年多，辗转两个大厂，出过书，创过业，从技术小白成长为基层管理，联合几个业内大牛回答下这个问题，希望能帮到大家，记得帮我点赞哦。 敲黑板！！！读了这篇文章，你将知道如何才能进大厂，如何实现财务自... 博文
大学四年自学走来，这些私藏的实用工具/学习网站我贡献出来了
10-28 阅读数 16万+
大学四年，看课本是不可能一直看课本的了，对于学习，特别是自学，善于搜索网上的一些资源来辅助，还是非常有必要的，下面我就把这几年私藏的各种资源，网站贡献出来给你们。主要有：电子书搜索、实用工具、在线视频... 博文
linux系列之常用运维命令整理笔录
11-02 阅读数 1万+
本博客记录工作中需要的linux运维命令，大学时候开始接触linux，会一些基本操作，可是都没有整理起来，加上是做开发，不做运维，有些命令忘记了，所以现在整理成博客，当然vi，文件操作等就不介绍了，慢... 博文
大学四年，我把私藏的自学「学习网站/实用工具」都贡献出来了
10-29 阅读数 9万+
在分享之前，先说说初学者如何学习编程，这个话题想必非常的重要，要学好编程，给你一些学习网站也好、实用工具也好，但前提是你知道如何去学习它。 见过很多初学者，以及小鹿我刚开始学习的时候，也是自己瞎摸索，... 博文
中国麻将：世界上最早的区块链项目
10-29 阅读数 5万+
中国麻将：世界上最早的区块链项目 最近区块链这个玩意又被市场搞的很是火热，相信大部分人都不太清楚这玩意到底是怎么样的一个概念，它来了，它来了，它到底是啥~ 国家都开始发文支持了，下面是一个通俗易懂的... 博文
比特币原理详解
10-29 阅读数 4万+
一、什么是比特币 比特币是一种电子货币，是一种基于密码学的货币，在2008年11月1日由中本聪发表比特币白皮书，文中提出了一种去中心化的电子记账系统，我们平时的电子现金是银行来记账，因为银行的背后是... 博文
Python 基础（一）：入门必备知识
10-30 阅读数 2万+
Python 入门必备知识，你都掌握了吗？ 博文
兼职程序员一般可以从什么平台接私活？
10-31 阅读数 8万+
这个问题我进行了系统性的总结，以下将进行言简意赅的说明和渠道提供，希望对各位小猿/小媛们有帮助~ 根据我们的经验，程序员兼职主要分为三种：兼职职位众包、项目整包和自由职业者驻场。 所谓的兼职职位众... 博文
Ngrok： 超简单的内网穿透，了解一下 ？
10-31 阅读数 1万+
【1】什么是内网穿透？ 首先，我们生活中的网络从应用上可以分为内网和外网； 内网就是你自己的网络环境，就你自己能访问，比如你本地测试进行的localhost； 外网就不言而喻了，你看网页，视频等... 博文
反射全解
10-31 阅读数 1万+
反射的概念 反射的引入： Object obj = new Student(); 若程序运行时接收到外部传入的一个对象，该对象的编译类型是Object，但程序又需要调用该对象运行类型的方法： ... 博文
图解面试题：如何提高SQL查询的效率？
10-31 阅读数 9768
【题目】我们公司的数据量非常大，需要的不仅仅是提取数据，要了解SQL方案优化的。一般在写SQL时需要注意哪些问题，可以提高查询的效率？【解题思路】数据量大的情况下，不同的SQL语句，消耗的时间相差很大... 博文
死磕C语言指针
11-01 阅读数 1万+
兜兜转转还是逃不过 C 语言，这该死的缘分。 先看一眼我的西野七濑 学习自：https://zhuanlan.zhihu.com/p/89121683 目录 1 指针 1.1 指针是乜嘢... 博文
Python十大装B语法
11-02 阅读数 8万+
Python 是一种代表简单思想的语言，其语法相对简单，很容易上手。不过，如果就此小视 Python 语法的精妙和深邃，那就大错特错了。本文精心筛选了最能展现 Python 语法之精妙的十个知识点，并... 博文
数据库优化 - SQL优化
11-01 阅读数 1万+
从一个示例入手，带你一步一步掌握SQL优化的技巧！ 博文
2019年11月全国程序员工资统计，区块链工程师比算法工资高。
11-02 阅读数 1万+
我每个月第一天（也许是第二天，第三天），会爬招聘网站，并在CSDN发布。 趋势 本月全国程序员平均工资为13451元，比上个月略涨。 北上广深杭工资趋势 区块链程序员的工资 职能 工资 ... 博文
送给单身猿们的表白神器
11-07 阅读数 2万+
问天下男生，有谁想单身？又有谁想单身一辈子？ 虽然本人也是单身狗，但是也是有一个远大的理想，哈哈，大白天的我又开始做梦了 原网址：http://wfhuang.coding.me/LoveJuan... 博文
python学习目录
11-07 阅读数 2万+
这是我学习python的一套流程，从入门到上手 一、Python入门、环境搭建、变量、数据类型 二、Python运算符、条件结构、循环结构 三、Python函数 四、做一次综合练习,做一个控制台... 博文
刷了几千道算法题，这些我私藏的刷题网站都在这里了！
11-08 阅读数 4万+
遥想当年，机缘巧合入了 ACM 的坑，周边巨擘林立，从此过上了"天天被虐似死狗"的生活… 然而我是谁，我可是死狗中的战斗鸡，智力不够那刷题来凑，开始了夜以继日哼哧哼哧刷题的日子，从此"读题与提交... 博文
JavaScript 为什么能活到现在？
11-08 阅读数 9731
作者 | 司徒正美 责编 |郭芮 出品 | CSDN（ID：CSDNnews） JavaScript能发展到现在的程度已经经历不少的坎坷，早产带来的某些缺陷是永久性的，因此浏览器才有禁用Ja... 博文
别翻了，这篇文章绝对让你深刻理解java类的加载以及ClassLoader源码分析【JVM篇二】
12-01 阅读数 1万+
点进文章的盆友不如先来做一道非常常见的面试题，如果你能做出来，可能你早已掌握并理解了java的类加载机制，若结果出乎你的意料，那就很有必要来了解了解java的类加载机制了。代码如下嗯哼？其实上面程序并... 博文
项目中的if else太多了，该怎么重构？
11-11 阅读数 2万+
介绍 最近跟着公司的大佬开发了一款IM系统，类似QQ和微信哈，就是聊天软件。我们有一部分业务逻辑是这样的 if (msgType = "文本") { // dosomething } else if... 博文
Nginx 原理和架构
11-09 阅读数 8456
Nginx 是一个免费的，开源的，高性能的 HTTP 服务器和反向代理，以及 IMAP / POP3 代理服务器。Nginx 以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。 Nginx... 博文
YouTube排名第一的励志英文演讲《Dream(梦想)》
11-12 阅读数 2万+
Idon’t know what that dream is that you have, I don't care how disappointing it might have been as y... 博文
动画图解：十大经典排序算法动画与解析，看我就够了！（配代码完全版）
11-13 阅读数 2万+
排序算法是《数据结构与算法》中最基本的算法之一。 排序算法可以分为内部排序和外部排序。 内部排序是数据记录在内存中进行排序。 而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程... 博文
“狗屁不通文章生成器”登顶GitHub热榜，分分钟写出万字形式主义大作
11-13 阅读数 4万+
一、垃圾文字生成器介绍 最近在浏览GitHub的时候，发现了这样一个骨骼清奇的雷人项目，而且热度还特别高。 项目中文名：狗屁不通文章生成器 项目英文名：BullshitGenerator 根据作... 博文
程序员需要了解的硬核知识之操作系统入门
11-13 阅读数 2536
对于程序员来说，最莫大的荣耀莫过于自己的软件被大多数人使用了吧。 历史文章请戳 程序员需要了解的硬核知识之内存 程序员需要了解的硬核知识之CPU 程序员需要了解的硬核知识之二进制 程序员需要了解的硬核... 博文
程序员：我终于知道post和get的区别
11-14 阅读数 5万+
是一个老生常谈的话题，然而随着不断的学习，对于以前的认识有很多误区，所以还是需要不断地总结的，学而时习之，不亦说乎... 博文
Java I/O体系从原理到应用，这一篇全说清楚了
11-13 阅读数 1943
本文介绍操作系统I/O工作原理，Java I/O设计，基本使用，开源项目中实现高性能I/O常见方法和实现，彻底搞懂高性能I/O之道基础概念在介绍I/O原理之前，先重温几个...... 博文
Java世界最常用的工具类库
11-20 阅读数 1万+
Apache Commons Apache Commons有很多子项目 Google Guava 参考博客 博文
程序员把地府后台管理系统做出来了，还有3.0版本！12月7号最新消息：已在开发中有github地址
11-17 阅读数 3万+
第一幕：缘起 听说阎王爷要做个生死簿后台管理系统，我们派去了一个程序员…… 996程序员做的梦： 第一场：团队招募 为了应对地府管理危机，阎王打算找“人”开发一套地府后台管理系统，于是... 博文
python json java mysql pycharm android linux json格式 c# 定义手势 c#字符串轉時間 c#开发手机app c# 正则表达式 c#文件加密程序 c# label 透明 c#object作参数 c#实例 ssl c#继承列表 c# 跳转窗口

没有更多推荐了，返回首页
©️2019 CSDN 皮肤主题: 大白 设计师: CSDN官方博客
  
Free World
 博客专家 已认证的专家 TA的个人主页 >
原创
258
粉丝
577
获赞
97
评论
144
访问
104万+
等级:
周排名:
1963
积分:
1万+
总排名:
2210
勋章:


专栏达人
授予成功创建个人博客专栏的用户。专栏中添加五篇以上博文即可点亮！撰写博客专栏浓缩技术精华，专栏达人就是你！


持之以恒
授予每个自然月内发布4篇或4篇以上原创或翻译IT博文的用户。不积跬步无以至千里，不积小流无以成江海，程序人生的精彩需要坚持不懈地积累！


勤写标兵Lv1
授予每个自然周发布1篇到3篇原创IT博文的用户。本勋章将于次周周三上午根据用户上周的博文发布情况由系统自动颁发。
关注
私信
最新文章
Apache Flink 培训系列 - Transformation 引发的思考
Delta Lake - 增删改事务操作之大结局
HBase - 生产环境上线前真的优化过吗？
ClickHouse - LowCardinality 数据类型的神秘之旅
Delta Lake - 数据更新的旅程
分类专栏
  Apache Kylin实战 13篇
  ClickHouse从0到1 1篇
  Python梦工厂 8篇
  HBase实战 9篇
  Hive实战 19篇
  Greenplum/DeepGreen实战 16篇
  Python 11篇
  Shell 15篇
  MySQL 37篇
  Oracle 17篇
  Perl 9篇
  Vertica 6篇
  SybaseIQ 4篇
  Greenplum 26篇
  Hadoop 16篇
  Linux 22篇
  PostgreSQL 1篇
  DataMiner 10篇
  Others 1篇
  Java 5篇
  Flume
  Kafka 1篇
  Hive 28篇
  Hbase 11篇
  Data Warehouse 3篇
  Oozie 1篇
  Impala 2篇
  Storm 1篇
  Spark 14篇
  Scala 7篇
  Tachyon 3篇
  Redis 4篇
  Kylin 20篇
  Sqoop 2篇
  ElasticSearch 6篇
  Phoenix 7篇
  Presto 1篇
  Docker 8篇
  Flink 3篇
  Neo4j 1篇
  CDH 1篇
  Embulk 1篇
  ClickHouse 2篇
展开
热门文章
新一代Hive客户端工具：Beeline
阅读数 21476
Harbor部署和使用
阅读数 20179
Hive ORC和Parquet
阅读数 19942
Vertica常用操作总结
阅读数 18970
解决镜像无法删除的问题
阅读数 18573
最新评论
Flink on Yarn部署
fox13754888170：我擦，这篇文章出自16年
CentOS 7.3上图数据库Ne...
weixin_38507462：感谢 现在neo4j已经更新了 from neo4j import GraphDatabase
NFS 官方资料
qq_40641575：博主，您好，请问nfs的官方文档在哪里找？ 可以发个链接吗？
Vertica常用操作总结
a_b_c_b_a_1_2_3：大佬 我有个问题 如果我要修改vertica的字段 但是这个表执行过插入数据的行为 也就是说 这张表已经存在一个projection了 这个时候我在修改字段类型的时候就会报错 请问有没有什么好的解决方案
目录
分类专栏
  Apache Kylin实战 13篇
  ClickHouse从0到1 1篇
  Python梦工厂 8篇
  HBase实战 9篇
  Hive实战 19篇
  Greenplum/DeepGreen实战 16篇
 Python 11篇
 Shell 15篇
 MySQL 37篇
 Oracle 17篇
 Perl 9篇
 Vertica 6篇
 SybaseIQ 4篇
 Greenplum 26篇
 Hadoop 16篇
 Linux 22篇
 PostgreSQL 1篇
 DataMiner 10篇
 Others 1篇
 Java 5篇
 Flume
 Kafka 1篇
 Hive 28篇
 Hbase 11篇
 Data Warehouse 3篇
 Oozie 1篇
 Impala 2篇
 Storm 1篇
 Spark 14篇
 Scala 7篇
 Tachyon 3篇
 Redis 4篇
 Kylin 20篇
 Sqoop 2篇
 ElasticSearch 6篇
 Phoenix 7篇
 Presto 1篇
 Docker 8篇
 Flink 3篇
 Neo4j 1篇
 CDH 1篇
 Embulk 1篇
 ClickHouse 2篇
  点赞 取消点赞
3
 海报
分享海报说明 
 评论
 目录
  
  收藏
 手机看
 上一篇
 下一篇
 更多
 上一篇
 下一篇
 打赏
打赏

Free World
“你的鼓励将是我创作的最大动力”
5C币 10C币 20C币 50C币 100C币 200C币
确定
  

分享到微信朋友圈
×
扫一扫，手机浏览